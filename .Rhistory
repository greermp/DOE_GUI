scale_x_continuous(breaks = pretty_breaks(10)) +
labs(title="CID Mix vs Ampib Drawdown",  y="Amphib Drawdown",
color="", linetype="") +
geom_vline(xintercept=8, color='red') +
annotate("Text", x=7, y=0, label="D-Day", color="Red")
ggplot(longSample, aes(x=Day, y=value, color=name, linetype=name)) +
geom_line(size=1.3) +
theme_minimal() +
scale_y_continuous(limits=c(0,1), labels=percent) +
scale_x_continuous(breaks = pretty_breaks(10)) +
labs(title="CID Mix vs Sortie Rate",  y="Planned Sorties Flown",
color="", linetype="") +
geom_vline(xintercept=8, color='red') +
annotate("Text", x=7, y=0, label="D-Day", color="Red")
ggplot(longSample, aes(x=Day, y=value, color=name, linetype=name)) +
geom_line(size=1.3) +
theme_minimal() +
scale_y_continuous(limits=c(0,1), labels=percent) +
scale_x_continuous(breaks = pretty_breaks(10)) +
labs(title="CID Mix vs Sortie Rate",  y="Planned Sorties Flown",
color="", linetype="")
library(tidyr)
dat <- read.table(text = "    ONE TWO THREE
1   23  234 324
2   34  534 12
3   56  324 124
4   34  234 124
5   123 534 654",sep = "",header = TRUE)
# Add an id variable for the filled regions and reshape
datm <- dat %>%
mutate(ind = factor(row_number())) %>%
gather(variable, value, -ind)
ggplot(datm, aes(x = variable, y = value, fill = ind)) +
geom_bar(position = "fill",stat = "identity") +
# or:
# geom_bar(position = position_fill(), stat = "identity")
scale_y_continuous(labels = scales::percent_format())
ggplot(datm, aes(x = variable, y = value, fill = ind)) +
geom_bar(position = "fill",stat = "identity") +
# or:
# geom_bar(position = position_fill(), stat = "identity")
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_brewer(palette = 'Dark2')
View(datm)
dat <- read.table(text = "    Baseline Mix_A Mix_B
1   23  234 324
2   34  534 12
3   56  324 124
4   34  234 124
5   123 534 654",sep = "",header = TRUE)
# Add an id variable for the filled regions and reshape
datm <- dat %>%
mutate(ind = factor(row_number())) %>%
gather(variable, value, -ind)
ggplot(datm, aes(x = variable, y = value, fill = ind)) +
geom_bar(position = "fill",stat = "identity") +
# or:
# geom_bar(position = position_fill(), stat = "identity")
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_brewer(palette = 'Dark2')
dat <- read.table(text = "    Baseline Mix_A Mix_B
1   23  234 324
2   34  534 12
3   56  324 124
4   34  234 124
5   123 534 654",sep = "",header = TRUE)
# Add an id variable for the filled regions and reshape
datm <- dat %>%
mutate(ind = factor(row_number())) %>%
gather(variable, value, -ind)
ggplot(datm, aes(x = variable, y = value, fill = ind)) +
geom_bar(position = "fill",stat = "identity") +
# or:
# geom_bar(position = position_fill(), stat = "identity")
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_brewer(palette = 'Dark2')
dat <- read.table(text = "    Baseline Mix_A Mix_B
A/A_Loss   56  324 124
A/S_Loss   34  234 124
Active   123 534 654",sep = "",header = TRUE)
# Add an id variable for the filled regions and reshape
datm <- dat %>%
mutate(ind = factor(row_number())) %>%
gather(variable, value, -ind)
ggplot(datm, aes(x = variable, y = value, fill = ind)) +
geom_bar(position = "fill",stat = "identity") +
# or:
# geom_bar(position = position_fill(), stat = "identity")
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_brewer(palette = 'Dark2')
ggplot(datm, aes(x = variable, y = value, fill = ind)) +
geom_bar(position = "fill",stat = "identity") +
# or:
# geom_bar(position = position_fill(), stat = "identity")
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_manual(values = c('Green', 'Red', 'Yellow'))
ggplot(datm, aes(x = variable, y = value, fill = ind)) +
geom_bar(position = "fill",stat = "identity") +
# or:
# geom_bar(position = position_fill(), stat = "identity")
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_manual(values = c('Green', 'Red', 'Dark Green'))
ggplot(datm, aes(x = variable, y = value, fill = ind)) +
geom_bar(position = "fill",stat = "identity") +
# or:
# geom_bar(position = position_fill(), stat = "identity")
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_manual(values = c('Green', 'Dark Orange', 'Dark Green'))
ggplot(datm, aes(x = variable, y = value, fill = ind)) +
geom_bar(position = "fill",stat = "identity") +
# or:
# geom_bar(position = position_fill(), stat = "identity")
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_manual(values = c('Dark Red', 'Dark Orange', 'Dark Green'))
# Add an id variable for the filled regions and reshape
datm <- dat %>%
mutate(ind = factor(row_number())) %>%
gather(variable, value, -ind)
ggplot(datm, aes(x = variable, y = value, fill = ind)) +
geom_bar(position = "fill",stat = "identity") +
# or:
# geom_bar(position = position_fill(), stat = "identity")
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_manual(values = c('Dark Red', 'Dark Orange', 'Dark Green'))
dat <- read.table(text = "    Type Baseline Mix_A Mix_B
A/A_Loss   56  324 124
A/S_Loss   34  234 124
Active   123 534 654",sep = "",header = TRUE)
dat
# Add an id variable for the filled regions and reshape
datm <- dat %>%
mutate(ind = factor(dat$Type)) %>%
gather(variable, value, -ind)
ggplot(datm, aes(x = variable, y = value, fill = ind)) +
geom_bar(position = "fill",stat = "identity") +
# or:
# geom_bar(position = position_fill(), stat = "identity")
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_manual(values = c('Dark Red', 'Dark Orange', 'Dark Green'))
ggplot(datm, aes(x = variable, y = value, fill = ind)) +
geom_bar(position = "fill",stat = "identity")
datm
dat <- read.table(text = "    Type Baseline Mix_A Mix_B
A/A_Loss   56  324 124
A/S_Loss   34  234 124
Active   123 534 654",sep = "",header = TRUE)
dat
dat %>% pivot_longer(cols=c('Baseline', 'Mix_A', 'Mix_B'))
datm <- dat %>% pivot_longer(cols=c('Baseline', 'Mix_A', 'Mix_B'))
ggplot(datm, aes(x = variable, y = value, fill = ind)) +
geom_bar(position = "fill",stat = "identity")
datm
ggplot(datm, aes(x = name, y = value, fill = Type)) +
geom_bar(position = "fill",stat = "identity")
ggplot(datm, aes(x = name, y = value, fill = Type)) +
geom_bar(position = "fill",stat = "identity") +
# or:
# geom_bar(position = position_fill(), stat = "identity")
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_manual(values = c('Dark Red', 'Dark Orange', 'Dark Green'))
dat <- read.table(text = "  Type Baseline Mix_A Mix_B
A/A_Loss   15  10 10
A/S_Loss   35  25 15
Active     50  60 75",
sep = "",header = TRUE)
datm <- dat %>% pivot_longer(cols=c('Baseline', 'Mix_A', 'Mix_B'))
ggplot(datm, aes(x = name, y = value, fill = Type)) +
geom_bar(position = "fill",stat = "identity") +
# or:
# geom_bar(position = position_fill(), stat = "identity")
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_manual(values = c('Dark Red', 'Dark Orange', 'Dark Green'))
ggplot(datm, aes(x = name, y = value, fill = Type)) +
geom_bar(position = "fill",stat = "identity") +
# or:
# geom_bar(position = position_fill(), stat = "identity")
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_manual(values = c('Dark Red', 'Dark Orange', 'Dark Green')) +
scale_minimal()
ggplot(datm, aes(x = name, y = value, fill = Type)) +
geom_bar(position = "fill",stat = "identity") +
# or:
# geom_bar(position = position_fill(), stat = "identity")
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_manual(values = c('Dark Red', 'Dark Orange', 'Dark Green')) +
theme_minimal()
ggplot(datm, aes(x = name, y = value, fill = Type)) +
geom_bar(position = "fill",stat = "identity") +
# or:
# geom_bar(position = position_fill(), stat = "identity")
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_manual(values = c('Dark Red', 'Dark Orange', 'Dark Green')) +
theme_minimal() +
labs(title="Aircraft Losses by Defense Mix")
ggplot(datm, aes(x = name, y = value, fill = Type)) +
geom_bar(position = "fill",stat = "identity") +
# or:
# geom_bar(position = position_fill(), stat = "identity")
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_manual(values = c('Dark Red', 'Dark Orange', 'Dark Green')) +
theme_minimal() +
labs(title="Aircraft Losses by Defense Mix",
x="", y ="")
dat <- read.table(text = "  Type Baseline Mix A Mix B
A/A_Loss   15  10 10
A/S_Loss   35  25 15
Active     50  60 75",
sep = "",header = TRUE)
datm <- dat %>% pivot_longer(cols=c('Baseline', 'Mix_A', 'Mix_B'))
dat <- read.table(text = "  Type Baseline 'Mix A' 'Mix B'
A/A_Loss   15  10 10
A/S_Loss   35  25 15
Active     50  60 75",
sep = "",header = TRUE)
datm <- dat %>% pivot_longer(cols=c('Baseline', 'Mix_A', 'Mix_B'))
datm <- dat %>% pivot_longer(cols=c('Baseline', 'Mix A', 'Mix B'))
ggplot(datm, aes(x = name, y = value, fill = Type)) +
geom_bar(position = "fill",stat = "identity") +
# or:
# geom_bar(position = position_fill(), stat = "identity")
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_manual(values = c('Dark Red', 'Dark Orange', 'Dark Green')) +
theme_minimal() +
labs(title="Aircraft Losses by Defense Mix",
x="", y ="")
datm <- dat %>% pivot_longer(cols=c('Baseline', 'Mix A', 'Mix B'))
dat <- read.table(text = "  Type Baseline 'Mix A' 'Mix B'
A/A_Loss   15  10 10
A/S_Loss   35  25 15
Active     50  60 75",
sep = "",header = TRUE)
datm <- dat %>% pivot_longer(cols=c('Baseline', 'Mix A', 'Mix B'))
dat
datm <- dat %>% pivot_longer(cols=c('Baseline', 'Mix.A', 'Mix.B'))
datm
ggplot(datm, aes(x = name, y = value, fill = Type)) +
geom_bar(position = "fill",stat = "identity") +
# or:
# geom_bar(position = position_fill(), stat = "identity")
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_manual(values = c('Dark Red', 'Dark Orange', 'Dark Green')) +
theme_minimal() +
labs(title="Aircraft Losses by Defense Mix",
x="", y ="")
dat <- read.table(text = "  Type Baseline 'Mix A' 'Mix B'
A/A_Loss   25  10 10
A/S_Loss   45  25 15
Active     30  60 75",
sep = "",header = TRUE)
datm <- dat %>% pivot_longer(cols=c('Baseline', 'Mix.A', 'Mix.B'))
ggplot(datm, aes(x = name, y = value, fill = Type)) +
geom_bar(position = "fill",stat = "identity") +
# or:
# geom_bar(position = position_fill(), stat = "identity")
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_manual(values = c('Dark Red', 'Dark Orange', 'Dark Green')) +
theme_minimal() +
labs(title="Aircraft Losses by Defense Mix",
x="", y ="")
dat <- read.table(text = "  Type Baseline 'Mix A' 'Mix B'
A/A_Loss   25  10 10
A/S_Loss   45  25 15
Mission_Capable     30  60 75",
sep = "",header = TRUE)
datm <- dat %>% pivot_longer(cols=c('Baseline', 'Mix.A', 'Mix.B'))
ggplot(datm, aes(x = name, y = value, fill = Type)) +
geom_bar(position = "fill",stat = "identity") +
# or:
# geom_bar(position = position_fill(), stat = "identity")
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_manual(values = c('Dark Red', 'Dark Orange', 'Dark Green')) +
theme_minimal() +
labs(title="Aircraft Losses by Defense Mix",
x="", y ="")
library(tidyverse)
library(scales)
sample <- tribble(
~Day, ~Baseline, ~Mix_A, ~Mix_B,
1,           1,     1,     1,
2,           .88,     .85,     .8,
3,           .84,     .8,     .58,
4,           .84,     .77,     .5,
5,           .8,     .75,     .45,
6,           .78,     .7,     .4,
7,           .74,     .67,     .35,
8,           .74,     .65,     .22,
9,           .7,      .6,     .2,
10,           .6,     .5,     .1
)
longSample <- sample %>% pivot_longer(cols = c('Baseline', 'Mix_A', 'Mix_B'))
ggplot(longSample, aes(x=Day, y=value, color=name, linetype=name)) +
geom_line(size=1.3) +
theme_minimal() +
scale_y_continuous(limits=c(0,1), labels=percent) +
scale_x_continuous(breaks = pretty_breaks(10)) +
labs(title="Defense Mix vs Ampib Drawdown",  y="Amphib Drawdown",
color="", linetype="") +
geom_vline(xintercept=8, color='red') +
annotate("Text", x=7, y=0, label="D-Day", color="Red")
sample <- tribble(
~Day, ~Baseline, ~Mix_A, ~Mix_B,
1,           1,       1,     1,
2,           .6,     .85,     .9,
3,           .55,     .8,     .85,
4,           .5,     .77,     .8,
5,           .5,     .75,     .8,
6,           .46,     .7,     .77,
7,           .4,     .67,     .75,
8,           .4,     .65,     .75,
9,           .4,      .6,     .74,
10,          .4,     .5,     .73
)
longSample <- sample %>% pivot_longer(cols = c('Baseline', 'Mix_A', 'Mix_B'))
ggplot(longSample, aes(x=Day, y=value, color=name, linetype=name)) +
geom_line(size=1.3) +
theme_minimal() +
scale_y_continuous(limits=c(0,1), labels=percent) +
scale_x_continuous(breaks = pretty_breaks(10)) +
labs(title="Defense Mix vs Sortie Rate",  y="Planned Sorties Flown",
color="", linetype="")
# geom_vline(xintercept=8, color='red') +
# annotate("Text", x=7, y=0, label="D-Day", color="Red")
library(tidyr)
dat <- read.table(text = "  Type Baseline 'Mix A' 'Mix B'
A/A_Loss   25  10 10
A/S_Loss   45  25 15
Mission_Capable     30  60 75",
sep = "",header = TRUE)
datm <- dat %>% pivot_longer(cols=c('Baseline', 'Mix.A', 'Mix.B'))
# # Add an id variable for the filled regions and reshape
# datm <- dat %>%
#   mutate(ind = factor(dat$Type)) %>%
#   gather(variable, value, -ind)
ggplot(datm, aes(x = name, y = value, fill = Type)) +
geom_bar(position = "fill",stat = "identity") +
# or:
# geom_bar(position = position_fill(), stat = "identity")
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_manual(values = c('Dark Red', 'Dark Orange', 'Dark Green')) +
theme_minimal() +
labs(title="Aircraft Losses by Defense Mix",
x="", y ="")
shiny::runApp('A9/shinyDOE/DOE_GUI')
runApp('A9/shinyDOE/DOE_GUI')
library(shiny)
library(DT)
library(reticulate)
library(reticulate)
# Define UI
ui <- shinyUI(fluidPage(
fileInput('target_upload', 'Choose file to upload',
accept = c(
'text/csv',
'text/comma-separated-values',
'.csv'
)),
radioButtons("separator","Separator: ",choices = c(";",",",":"), selected=",",inline=TRUE),
dataTableOutput("sample_table")
)
)
runApp('A9/shinyDOE/DOE_GUI')
runApp('A9/shinyDOE/DOE_GUI')
Y
runApp('A9/shinyDOE/DOE_GUI')
library(reticulate)
source_python('DoeMaker.py')
setwd("~/A9/shinyDOE/DOE_GUI")
setwd("~/A9/shinyDOE/DOE_GUI")
source_python('DoeMaker.py')
print(getDOE('hi'))
print(DoeMaker.getDOE('hi'))
doe <- import(DoeMaker)
doe <- import(DoeMaker)
doe <- import(pyDOE2)
source_python('DoeMaker.py')
library(reticulate)
setwd("~/A9/shinyDOE/DOE_GUI")
source_python('DoeMaker.py')
conda_list(conda = "auto")
options(reticulate.conda_binary = "\\wsl.localhost\Ubuntu\home\greermp\anaconda3")
library(reticulate)
setwd("~/A9/shinyDOE/DOE_GUI")
conda_list(conda = "auto")
print(getDOE('hi'))
source_python('DoeMaker.py')
source_python('DoeMaker.py')
source_python('DoeMaker.py')
conda_install(envname = 'r-reticulate', packages = c('pyDOE2'))
source_python('DoeMaker.py')
flights <- getDOE("hi")
flights
source_python('DoeMaker.py')
source_python('DoeMaker.py')
flights <- getDOE("hi")
flights
flights <- getDOE(3)
flights
flights <- ff2n(3)
flights
source_python('DoeMaker.py')
flights <- ff2n(3)
source_python('DoeMaker.py')
flights <- ff2n(3)
flights <- ff2n(as.numeric(3))
source_python('DoeMaker.py')
flights <- ff2n(as.numeric(3))
source_python('DoeMaker.py')
source_python('DoeMaker.py')
flights <- ff2n(as.numeric(3))
flights <- ff2n(c('3'))
source_python('DoeMaker.py')
flights <- ff2n(c('3'))
flights <- ff2n(2)
flights <- ff2n(2)
flights
flights
flights <- ff2n(2)
flights
flights
flights
flights <- ff2n()
flights <- ff2n(5)
source_python('DoeMaker.py')
flights <- ff2n(5)
source_python('DoeMaker.py')
flights <- ff2n(5)
flights
runApp()
runApp()
runApp()
runApp()
typeof(flights)
data.frame(flights)
runApp()
DT::datatable(flights)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/A9/shinyDOE/DOE_GUI/InstallPackages.R', echo=TRUE)
flights
flights
data.frame(flights)
flights <- data.frame(flights)
rownames(flights) <- paste("Case",seq(nrow(flights)))
flights
rownames(flights) <- paste0("Case",seq(nrow(flights)))
runApp()
source_python('DoeMaker.py')
runApp()
source('~/A9/shinyDOE/test/app.R', echo=TRUE)
runApp('~/A9/shinyDOE/test')
runApp()
runApp()
runApp()
runApp()
source_python('DoeMaker.py')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
len <- 5
empty_list <- vector(mode = "list", length = len)
empty_list
class(empty_list)
empty_list[0]
empty_list[1]
empty_list[1] = 'asdg'
empty_list[1]
runApp()
runApp()
list()
z=list()
z[0]
z[1]
z[1] = 2
z
z[3] = 2
z
test=list()
test
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
